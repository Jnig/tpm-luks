#!/bin/bash -e
#
# tpm-luks-init: For each entry in the config file, run the script to
#		 generate its PCR values, then run tpm-luks to create a
#		 new TPM NVRAM secret for it
#
#
CONF=/etc/tpm-luks.conf
NVPERMSFILE=$(mktemp /tmp/${0##*/}-XXXXXX)
OWNERPASS=""

function usage
{
        echo "usage ${0##*/}: [-y]"
        echo -e "  -y                use the well known secret (all zeroes) as the owner password."
        echo -e "                     This will apply both to the NV define and NV write operations"
        echo -e "                     if they apply, as well as NV read."
        echo -e "  -h                help"

}

while getopts "y" opt; do
        case $opt in
        y)
                OWNERPASS="-y"
                ;;
        *)
                usage
                exit 255
                ;;
        esac
done

function cleanup
{
	rm -f ${NVPERMSFILE}
}

trap cleanup EXIT

DEVICES=( $(cat ${CONF} | awk -F: '! /^#/ {print $1}') )
INDEXES=( $(cat ${CONF} | awk -F: '! /^#/ {print $2}') )
SCRIPTS=( $(cat ${CONF} | awk -F: '! /^#/ {print $3}') )

NUM_DEVICES=$(( ${#DEVICES[@]} - 1 ))
NUM_INDEXES=$(( ${#INDEXES[@]} - 1 ))
NUM_SCRIPTS=$(( ${#SCRIPTS[@]} - 1 ))

if [ $NUM_SCRIPTS -ne $NUM_DEVICES -o $NUM_DEVICES -ne $NUM_INDEXES ]; then
	echo "${CONF} parse error" 1>&2
	exit 1
fi

for d in $(seq 0 $NUM_DEVICES); do
	echo "Generating PCR values for ${DEVICES[$d]}..."
	${SCRIPTS[$d]} -o ${NVPERMSFILE}
	if [ $? -ne 0 ]; then
		echo "${SCRIPTS[$d]} has failed. Aborting."
		exit 2
	fi

	echo "Creating new TPM NVRAM secret for ${DEVICES[$d]}..."
	tpm-luks -c -d ${DEVICES[$d]} -i ${INDEXES[$d]} -p ${NVPERMSFILE} ${OWNERPASS}
	if [ $? -ne 0 ]; then
		echo "tpm-luks has failed. Aborting."
		exit 3
	fi
	rm -f ${NVPERMSFILE}
done

exit 0
